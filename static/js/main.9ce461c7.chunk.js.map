{"version":3,"sources":["db.ts","GamesList.tsx","rules.ts","RoundEdit.tsx","RoundView.tsx","GameView.tsx","NewGame.tsx","SetPlayers.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["SCHEMA","name","config","keyPath","autoIncrement","indexes","Database","idb","this","games","transaction","objectStore","Promise","accept","reject","array","index","openCursor","onsuccess","event","cursor","target","result","push","value","continue","id","get","game","undefined","game_players","IDBKeyRange","only","rounds","a","_getGame","_getPlayers","players","_getRounds","add","created","Date","modified","gameId","put","Error","delete","names","round","roundId","database","attacker","called","contract","attackOudlers","attackScore","db_future","window","indexedDB","request","open","onerror","alert","db","error","addTestData","then","onupgradeneeded","console","log","oldVersion","newVersion","forEach","createObjectStore","idxColumn","createIndex","unique","GamesList","props","state","listGames","setState","className","map","to","React","PureComponent","roundTarget","roundContractMultiplier","roundPlayerMultiplier","playerId","totalScores","scores","Map","player","set","attackSuccessful","contractMultiplier","score","Math","abs","change","length","RoundEdit","Object","assign","max","min","defenseScore","changeAttackScore","preventDefault","changeRound","onSubmit","handleSubmit","bind","style","marginTop","onChange","changeContract","changeAttacker","parseInt","type","size","changeOudlers","changeDefenseScore","RoundView","playersById","onClick","editRound","GameView","gameInfo","removed","isNaN","getGame","info","roundsById","editing","newName","prompt","renameGame","confirm","removeGame","oldState","setRound","roundIndex","otherRound","concat","slice","rename","remove","NewGame","createGame","SetPlayers","playerNames","playerIdGen","ready","setPlayers","p","changed","onBlur","blurred","commit","disabled","App","process","basename","path","render","match","params","Boolean","location","hostname","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister","catch","message"],"mappings":"iSA2BMA,EAAS,CACb,CACEC,KAAM,QACNC,OAAQ,CAACC,QAAS,KAAMC,eAAe,GACvCC,QAAS,CAAC,OAAQ,UAAW,aAE/B,CACEJ,KAAM,eACNC,OAAQ,CAACC,QAAS,KAAMC,eAAe,GACvCC,QAAS,CAAC,SAEZ,CACEJ,KAAM,SACNC,OAAQ,CAACC,QAAS,KAAMC,eAAe,GACvCC,QAAS,CAAC,UAIDC,EAAb,WAGE,WAAYC,GAAmB,yBAF/BA,SAE8B,EAC5BC,KAAKD,IAAMA,EAJf,6CAOE,WACE,IACME,EADcD,KAAKD,IAAIG,YAAY,CAAC,SAAU,YAC1BC,YAAY,SACtC,OAAO,IAAIC,SAAQ,SAACC,EAAQC,GAC1B,IAAMC,EAAgB,GACtBN,EAAMO,MAAM,WAAWC,aAAaC,UAAY,SAACC,GAC/C,IAAMC,EAAUD,EAAME,OAA2CC,OAC9DF,GACDL,EAAMQ,KAAMH,EAAoCI,OAChDJ,EAAOK,YAEPZ,EAAOE,SAlBjB,sBAwBE,SAASL,EAA6BgB,GACpC,IAAMjB,EAAQC,EAAYC,YAAY,SACtC,OAAO,IAAIC,SAAQ,SAACC,EAAQC,GAC1BL,EAAMkB,IAAID,GAAIR,UAAY,SAACC,GACzB,IAAMS,EAAQT,EAAME,OAAwDC,OAE1ET,OADUgB,IAATD,EACM,KAEAA,SAhCjB,yBAsCE,SAAYlB,EAA6BgB,GACvC,IAAMI,EAAepB,EAAYC,YAAY,gBAC7C,OAAO,IAAIC,SAAQ,SAACC,EAAQC,GAC1B,IAAMC,EAAkB,GACxBe,EAAad,MAAM,QAAQC,WAAWc,YAAYC,KAAKN,IAAKR,UAAY,SAACC,GACvE,IAAMC,EAAUD,EAAME,OAA2CC,OAC9DF,GACDL,EAAMQ,KAAMH,EAAsCI,OAClDJ,EAAOK,YAEPZ,EAAOE,SAhDjB,wBAsDE,SAAWL,EAA6BgB,GACtC,IAAMO,EAASvB,EAAYC,YAAY,UACvC,OAAO,IAAIC,SAAQ,SAACC,EAAQC,GAC1B,IAAMC,EAAiB,GACvBkB,EAAOjB,MAAM,QAAQC,WAAWc,YAAYC,KAAKN,IAAKR,UAAY,SAACC,GACjE,IAAMC,EAAUD,EAAME,OAA2CC,OAC9DF,GACDL,EAAMQ,KAAMH,EAAqCI,OACjDJ,EAAOK,YAEPZ,EAAOE,SAhEjB,4DAsEE,WAAcW,GAAd,qBAAAQ,EAAA,6DACQxB,EAAcF,KAAKD,IAAIG,YAC3B,CAAC,QAAS,eAAgB,UAC1B,YAHJ,SAMqBF,KAAK2B,SAASzB,EAAagB,GANhD,UAOc,QADNE,EANR,iDAQW,MARX,wBAW0BpB,KAAK4B,YAAY1B,EAAagB,GAXxD,eAWUW,EAXV,iBAYyB7B,KAAK8B,WAAW5B,EAAagB,GAZtD,eAYUO,EAZV,yBAcW,CAACL,OAAMS,UAASJ,WAd3B,iDAtEF,+EAwFE,WACE,IACMxB,EADcD,KAAKD,IAAIG,YAAY,CAAC,SAAU,aAC1BC,YAAY,SACtC,OAAO,IAAIC,SAAQ,SAACC,EAAQC,GAC1BL,EAAM8B,IAAI,CAACtC,KAAM,WAAYuC,QAAS,IAAIC,KAAQC,SAAU,IAAID,OAASvB,UAAY,SAACC,GACpF,IAAMwB,EAAUxB,EAAME,OAAuCC,OAC7DT,EAAO8B,SA9Ff,wBAmGE,SAAWjB,EAAYzB,GACrB,IACMQ,EADcD,KAAKD,IAAIG,YAAY,CAAC,SAAU,aAC1BC,YAAY,SACtC,OAAO,IAAIC,SAAQ,SAACC,EAAQC,GAC1BL,EAAMkB,IAAID,GAAIR,UAAY,SAACC,GACzB,IAAMS,EAAQT,EAAME,OAAqCC,OACrDM,GAGFA,EAAK3B,KAAOA,EACZQ,EAAMmC,IAAIhB,GAAMV,UAAY,WAC1BL,MAJFC,EAAO,IAAI+B,MAAM,uBA1G3B,+DAqHE,WAAiBnB,GAAjB,eAAAQ,EAAA,6DACQxB,EAAcF,KAAKD,IAAIG,YAAY,CAAC,QAAS,eAAgB,UAAW,aADhF,SAGQ,IAAIE,SAAQ,SAACC,EAAQC,GACJJ,EAAYC,YAAY,gBAChCK,MAAM,QAAQC,WAAWc,YAAYC,KAAKN,IAAKR,UAAY,SAACC,GACvE,IAAMC,EAAUD,EAAME,OAA2CC,OAC9DF,GACDA,EAAO0B,SACP1B,EAAOK,YAEPZ,EAAO,OAXf,uBAgBQ,IAAID,SAAQ,SAACC,EAAQC,GACVJ,EAAYC,YAAY,UAChCK,MAAM,QAAQC,WAAWc,YAAYC,KAAKN,IAAKR,UAAY,SAACC,GACjE,IAAMC,EAAUD,EAAME,OAA2CC,OAC9DF,GACDA,EAAO0B,SACP1B,EAAOK,YAEPZ,EAAO,OAxBf,uBA6BQ,IAAID,SAAQ,SAACC,EAAQC,GACXJ,EAAYC,YAAY,SAChCmC,OAAOpB,GAAIR,UAAY,SAACC,GAC5BN,EAAO,OAhCb,gDArHF,sHA0JE,WAAiB8B,EAAgBI,GAAjC,uBAAAb,EAAA,sDACQxB,EAAcF,KAAKD,IAAIG,YAAY,CAAC,gBAAiB,aACrDoB,EAAepB,EAAYC,YAAY,gBAF/C,cAGoBoC,GAHpB,aAAAb,EAAA,kCAAAA,EAAA,6DAGYjC,EAHZ,iBAIU,IAAIW,SAAQ,SAACC,EAAQC,GACzBgB,EAAaS,IAAI,CAACX,KAAMe,EAAQ1C,SAChCY,EAAO,MANb,mUA1JF,+EAqKE,SAASmC,GACP,IACMf,EADczB,KAAKD,IAAIG,YAAY,CAAC,UAAW,aAC1BC,YAAY,UACvC,OAAO,IAAIC,SAAQ,SAACC,EAAQC,GAC1BmB,EAAOW,IAAII,GAAO9B,UAAY,SAACC,GAC7B,IAAM8B,EAAW9B,EAAME,OAAuCC,OAC9DT,EAAOoC,WA3Kf,K,4CAiLA,WAA2BC,GAA3B,qBAAAhB,EAAA,6DAEQxB,EAAcwC,EAAS3C,IAAIG,YAC/B,CAAC,QAAS,eAAgB,UAC1B,aAEID,EAAQC,EAAYC,YAAY,SANxC,SASwB,IAAIC,SAAQ,SAACC,EAAQC,GACzCL,EAAMQ,aAAaC,UAAY,SAACC,GAC9B,IAAIC,EAAUD,EAAME,OAA2CC,OAE7DT,IADCO,OAZT,gBAuBIX,EAAM8B,IACJ,CAACb,GAAI,EAAGzB,KAAM,SAAUuC,QAAS,IAAIC,KAAK,uBAAwBC,SAAU,IAAID,KAAK,yBAEvFhC,EAAM8B,IACJ,CAACb,GAAI,EAAGzB,KAAM,SAAUuC,QAAS,IAAIC,KAAK,uBAAwBC,SAAU,IAAID,KAAK,0BAGjFX,EAAepB,EAAYC,YAAY,iBAChC4B,IACX,CAACb,GAAI,EAAGE,KAAM,EAAG3B,KAAM,SAEzB6B,EAAaS,IACX,CAACb,GAAI,EAAGE,KAAM,EAAG3B,KAAM,UAEzB6B,EAAaS,IACX,CAACb,GAAI,EAAGE,KAAM,EAAG3B,KAAM,WAGnBgC,EAASvB,EAAYC,YAAY,WAChC4B,IACL,CAACb,GAAI,EAAGE,KAAM,EAAGuB,SAAU,EAAGC,OAAQ,KAAMC,SAAU,SAAUC,cAAe,EAAGC,YAAa,KAEjGtB,EAAOM,IACL,CAACb,GAAI,EAAGE,KAAM,EAAGuB,SAAU,EAAGC,OAAQ,KAAMC,SAAU,QAASC,cAAe,EAAGC,YAAa,KAEhGtB,EAAOM,IACL,CAACb,GAAI,EAAGE,KAAM,EAAGuB,SAAU,EAAGC,OAAQ,KAAMC,SAAU,SAAUC,cAAe,EAAGC,YAAa,MAjDrG,4C,sBAsDO,IAAMC,EAA+B,IAAI5C,SAAQ,SAACC,EAAQC,GAC/D,GAAI2C,OAAOC,UAEJ,CAEL,IAAIC,EAAUF,OAAOC,UAAUE,KAAK,SAhQxB,GAiQZD,EAAQE,QAAU,WAChBC,MAAM,0BACNhD,EAAO,IAAI+B,MAAM,4BAEnBc,EAAQzC,UAAY,SAACC,GACnB,IAAM4C,EAAkBJ,EAAQrC,OAEhCyC,EAAGF,QAAU,SAAC1C,GAAW,IAAD,EAChB6C,EAAK,UAAI7C,EAAME,cAAV,aAAG,EAAuB2C,MAClCA,GACDF,MAAM,mBAAqBE,I,2CAM/BC,CAFe,IAAI3D,EAASyD,IAENG,MAAK,WAEzBrD,EAAO,IAAIP,EAASyD,QAIxBJ,EAAQQ,gBAAkB,SAAChD,GAGzB,GADAiD,QAAQC,IAAI,sBAAuBlD,EAAMmD,WAAY,KAAMnD,EAAMoD,YAzRvD,IA0RPpD,EAAMmD,WAAT,CAGA,IAAIP,EAAmB5C,EAAME,OAA4CC,OACzEtB,EAAOwE,SAAQ,YAA8B,IAA5BvE,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,OAAQG,EAAa,EAAbA,QACzBM,EAAcoD,EAAGU,kBAAkBxE,EAAMC,GAC7CG,EAAQmE,SAAQ,SAACE,GAAD,OAAe/D,EAAYgE,YAAYD,EAAWA,EAAW,CAACE,QAAQ,iBAnC1Fd,MAAM,oE,OC1QGe,EAAb,kDACE,WAAYC,GAAwB,IAAD,8BACjC,cAAMA,IACDC,MAAQ,CACXtE,WAAOoB,GAHwB,EADrC,qDAQE,WAAqB,IAAD,OAElB,sBAAC,4BAAAK,EAAA,sEACqB,EAAK4C,MAAM5B,SAAS8B,YADzC,OACOvE,EADP,OAEC,EAAKwE,SAAS,CAACxE,UAFhB,0CAAD,KAVJ,oBAgBE,WACE,IAAOA,EAASD,KAAKuE,MAAdtE,MACP,OAAIA,EAIA,qBAAIyE,UAAU,aAAd,UACGzE,EAAM0E,KAAI,SAACvD,GAAD,OACT,6BAAkB,cAAC,IAAD,CAAMwD,GAAE,WAAMxD,EAAKF,IAAnB,SAA0BE,EAAK3B,QAAxC2B,EAAKF,OAEhB,oBAAcwD,UAAU,WAAxB,SAAmC,cAAC,IAAD,CAAME,GAAG,OAAT,uBAA3B,UAPL,+CAnBb,GAA+BC,IAAMC,e,QCV9B,SAASC,EAAYvC,GAC1B,OAA2B,IAAxBA,EAAMM,cACA,GACyB,IAAxBN,EAAMM,cACP,GACyB,IAAxBN,EAAMM,cACP,GAEA,GAIJ,SAASkC,EAAwBxC,GACtC,MAAsB,UAAnBA,EAAMK,SACA,EACoB,eAAnBL,EAAMK,SACP,EACoB,iBAAnBL,EAAMK,SACP,EAEA,EAIJ,SAASoC,EAAsBC,EAAkBrD,EAAiBW,GACvE,OAAe,IAAZX,EACEqD,IAAa1C,EAAMG,UAAYuC,IAAa1C,EAAMI,OAE5C,EACCsC,IAAa1C,EAAMG,SAEpB,EACCuC,IAAa1C,EAAMI,OAEpB,GAGC,EAGPsC,IAAa1C,EAAMG,SAEbd,EAAU,GAGT,EAKP,SAASsD,EAAYtD,EAAmBJ,GAC7C,IAAM2D,EAAS,IAAIC,IAyBnB,OAxBAxD,EAAQmC,SAAQ,SAACsB,GACfF,EAAOG,IAAID,EAAOpE,GAAI,MAExBO,EAAOuC,SAAQ,SAACxB,GAEd,IAAM3B,EAASkE,EAAYvC,GAGrBgD,EAAmBhD,EAAMO,aAAelC,EAG1C4E,EAAqBT,EAAwBxC,GAE3CkD,GAAS,GAAKC,KAAKC,IAAIpD,EAAMO,YAAclC,KAAY2E,EAAiB,GAAG,GAAKC,EAEtF5D,EAAQmC,SAAQ,SAACsB,GACf,IAAMO,EAASH,EAAQT,EAAsBK,EAAOpE,GAAIW,EAAQiE,OAAQtD,GACxE4C,EAAOG,IACLD,EAAOpE,GACPkE,EAAOjE,IAAImE,EAAOpE,IAAM2E,SAKvBT,ECrEF,IAAMW,EAAb,kDACE,WAAYzB,GAAwB,IAAD,8BACjC,cAAMA,IACDC,MAAQyB,OAAOC,OAAO,GAAI3B,EAAM9B,OAFJ,EADrC,kDAME,SAAeK,GACb7C,KAAKyE,SAAS,CAAC5B,eAPnB,4BAUE,SAAeqC,GACblF,KAAKyE,SAAS,CAAC9B,SAAUuC,MAX7B,2BAcE,SAAcpC,GACZ9C,KAAKyE,SAAS,CAAC3B,cAAe6C,KAAKO,IAAI,EAAGP,KAAKQ,IAAI,EAAGrD,QAf1D,+BAkBE,SAAkBC,GAChB/C,KAAKyE,SAAS,CAAC1B,YAAa4C,KAAKO,IAAI,EAAGP,KAAKQ,IAAI,GAAIpD,QAnBzD,gCAsBE,SAAmBqD,GACjBpG,KAAKqG,kBAAkB,GAAKD,KAvBhC,0BA0BE,SAAazF,GACXA,EAAM2F,iBACNtG,KAAKsE,MAAMiC,YAAYvG,KAAKuE,SA5BhC,oBA+BE,WAAU,IAAD,OACA1C,EAAW7B,KAAKsE,MAAhBzC,QACDW,EAAQxC,KAAKuE,MACbxB,EAAcP,EAAMO,YACpBqD,EAAe,GAAK5D,EAAMO,YAChC,OACE,uBAAMyD,SAAUxG,KAAKyG,aAAaC,KAAK1G,MAAO2G,MAAO,CAACC,UAAW,OAAjE,uBACY,yBAAQ5F,MAAOwB,EAAMK,SAAUgE,SAAU,SAAClG,GAAD,OAAW,EAAKmG,eAAenG,EAAME,OAAOG,QAArF,UACR,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,aAAd,wBACA,wBAAQA,MAAM,eAAd,6BACQ,IANZ,WAOQ,wBAAQA,MAAOwB,EAAMG,SAAUkE,SAAU,SAAClG,GAAD,OAAW,EAAKoG,eAAeC,SAASrG,EAAME,OAAOG,MAAO,MAArG,SACHa,EAAQ8C,KAAI,SAACW,GAAD,OAAY,wBAAwBtE,MAAOsE,EAAOpE,GAAtC,SAA2CoE,EAAO7F,MAArC6F,EAAOpE,SACrC,IATZ,YAUW,uBAAO+F,KAAK,SAASd,IAAK,EAAGD,IAAK,EAAGgB,KAAM,EAAGlG,MAAOwB,EAAMM,cAAe+D,SAAU,SAAClG,GAAD,OAAW,EAAKwG,cAAcH,SAASrG,EAAME,OAAOG,MAAO,QAAS,IAVnK,WAWU,uBAAOiG,KAAK,SAASd,IAAK,EAAGD,IAAK,GAAIgB,KAAM,EAAGlG,MAAO+B,EAAa8D,SAAU,SAAClG,GAAD,OAAW,EAAK0F,kBAAkBW,SAASrG,EAAME,OAAOG,MAAO,QAAS,IAX/J,YAYW,uBAAOiG,KAAK,SAASd,IAAK,EAAGD,IAAK,GAAIgB,KAAM,EAAGlG,MAAOoF,EAAcS,SAAU,SAAClG,GAAD,OAAW,EAAKyG,mBAAmBJ,SAASrG,EAAME,OAAOG,MAAO,QAAS,IAChK,uBAAOiG,KAAK,SAASjG,MAAM,eAlDnC,GAA+B6D,IAAMC,eCGxBuC,EAAb,4JACE,WAAU,IAAD,OACP,EAAsCrH,KAAKsE,MAApCzC,EAAP,EAAOA,QAASyF,EAAhB,EAAgBA,YAAa9E,EAA7B,EAA6BA,MAEvB3B,EAASkE,EAAYvC,GACrBgD,EAAmBhD,EAAMO,aAAelC,EACxC4E,EAAqBT,EAAwBxC,GAC7CkD,GAAS,GAAKC,KAAKC,IAAIpD,EAAMO,YAAclC,KAAY2E,EAAiB,GAAG,GAAKC,EAOtF,OAAQ,qCACN,6BACE,yBAAQf,UAAU,YAAY6C,QAAS,kBAAM,EAAKjD,MAAMkD,UAAUhF,EAAMtB,KAAxE,UACGsB,EAAMtB,GADT,KACeoG,EAAYnG,IAAIqB,EAAMG,UAAWlD,KADhD,IACuD+C,EAAMK,SAD7D,KAC0EL,EAAMO,aAAelC,EAAQ,QAAQ,SAAU8E,KAAKC,IAAIpD,EAAMO,YAAclC,OAFhJ,SAKPgB,EAAQ8C,KAAI,SAACW,GAAD,OACX,8BAZuBJ,EAYgBI,EAAOpE,GAXjCwE,EAAQT,EAAsBC,EAAUrD,EAAQiE,OAAQtD,KAW5D8C,EAAOpE,IAZM,IAACgE,YAT/B,GAA+BL,IAAMC,eCexB2C,EAAb,kDACE,WAAYnD,GAAuB,IAAD,8BAChC,cAAMA,IACDC,MAAQ,CACXmD,cAAUrG,EACVsG,SAAS,GAJqB,EADpC,qDASE,WAAqB,IAAD,OAEdzG,EAAK8F,SAAShH,KAAKsE,MAAMpD,GAAI,IAC9B0G,MAAM1G,GACPlB,KAAKyE,SAAS,CAACiD,SAAU,OAEzB,sBAAC,wCAAAhG,EAAA,sEACoB,EAAK4C,MAAM5B,SAASmF,QAAQ3G,GADhD,OAEa,QADN4G,EADP,QAGG,EAAKrD,SAAS,CAACiD,SAAU,QAElBtG,EAAyB0G,EAAzB1G,KAAMS,EAAmBiG,EAAnBjG,QAASJ,EAAUqG,EAAVrG,OAEhB6F,EAAc,IAAIjC,IACxBxD,EAAQmC,SAAQ,SAACsB,GAAD,OAAYgC,EAAY/B,IAAID,EAAOpE,GAAIoE,MAEjDyC,EAAa,IAAI1C,IACvB5D,EAAOuC,SAAQ,SAACxB,GAAD,OAAWuF,EAAWxC,IAAI/C,EAAMtB,GAAIsB,MAG7C4C,EAASD,EAAYtD,EAASJ,GAEpC,EAAKgD,SAAS,CACZiD,SAAU,CACRtG,OACAS,UACAyF,cACA7F,SACAsG,aACA3C,SACA4C,aAAS3G,MAxBhB,0CAAD,KAfN,oBA+CE,WAAU,IAAD,OACAqG,EAAY1H,KAAKuE,MAAjBmD,SACP,GAAIA,EAAJ,CAGE,IAAOtG,EAAQsG,EAARtG,KACD6G,EAAUhF,OAAOiF,OAAO,WAAY9G,EAAK3B,MAC5CwI,GAAWA,IAAY7G,EAAK3B,MAC7B,sBAAC,sBAAAiC,EAAA,sEACO,EAAK4C,MAAM5B,SAASyF,WAAW/G,EAAKF,GAAI+G,GAD/C,OAEC,EAAKxD,SAAS,CACZiD,SAAS,2BACJA,GADG,IAENtG,KAAK,2BAAKA,GAAN,IAAY3B,KAAMwI,QAL3B,0CAAD,MAvDR,oBAoEE,WAAU,IAAD,OACAP,EAAY1H,KAAKuE,MAAjBmD,SACP,GAAIA,EAAJ,CAGE,IAAOtG,EAAQsG,EAARtG,KACW6B,OAAOmF,QAAQ,qCAE/B,sBAAC,sBAAA1G,EAAA,sEACO,EAAK4C,MAAM5B,SAAS2F,WAAWjH,EAAKF,IAD3C,OAEC,EAAKuD,SAAS,CACZkD,SAAS,IAHZ,0CAAD,MA5ER,uBAsFE,SAAUlF,GACRzC,KAAKyE,UAAS,SAAC6D,GACb,IAAOZ,EAAYY,EAAZZ,SACP,OAAGA,EACM,CAACA,SAAS,2BAAKA,GAAN,IAAgBM,QAASvF,KAElC,CAACiF,iBA5FhB,gEAiGE,WAAkBlF,GAAlB,SAAAd,EAAA,sEACmB1B,KAAKsE,MAAM5B,SAAS6F,SAAS/F,GADhD,OACEA,EAAMtB,GADR,OAEElB,KAAKyE,UAAS,SAAC6D,GACb,IAAOZ,EAAYY,EAAZZ,SACP,GAAGA,EAAU,CACX,IAMIjG,EANA+G,OAAanH,EAejB,OAdAqG,EAASjG,OAAOuC,SAAQ,SAACyE,EAAYjI,GAChCiI,EAAWvH,KAAOsB,EAAMtB,KACzBsH,EAAahI,MAKfiB,OADgBJ,IAAfmH,EACQd,EAASjG,OAAOiH,OAAO,CAAClG,IAExBkF,EAASjG,OAAOkH,MAAM,EAAGH,GAAYE,OAC5C,CAAClG,GACDkF,EAASjG,OAAOkH,MAAMH,EAAa,IAGhC,CAACd,SAAS,2BAAKA,GAAN,IAAgBjG,SAAQuG,aAAS3G,KAEjD,MAAO,CAACqG,eAtBd,gDAjGF,2EA4HE,WAAU,IAAD,OACP,EAA4B1H,KAAKuE,MAA1BmD,EAAP,EAAOA,SACP,OADA,EAAiBC,QAER,cAAC,IAAD,CAAU/C,GAAG,WACCvD,IAAbqG,EACD,2CACc,OAAbA,EACD,6CAGL,qCACE,4BAAG,cAAC,IAAD,CAAM9C,GAAG,IAAT,6BACH,+BACG8C,EAAStG,KAAK3B,KAAM,IACrB,wBAAQ8H,QAAS,kBAAM,EAAKqB,UAA5B,oBAAsD,IACtD,wBAAQrB,QAAS,kBAAM,EAAKsB,UAA5B,yBAEF,wBAAOnE,UAAU,SAAjB,UACE,gCACE,+BACE,oBAAIA,UAAU,WACbgD,EAAS7F,QAAQ8C,KAAI,SAACW,GAAD,OACpB,6BAAqBA,EAAO7F,MAAnB6F,EAAOpE,YAItB,kCACGwG,EAASjG,OAAOkD,KAAI,SAACnC,GAAD,OACnB,6BACE,cAAC,EAAD,CACEpB,KAAMsG,EAAStG,KACfS,QAAS6F,EAAS7F,QAClByF,YAAaI,EAASJ,YACtB9E,MAAOA,EACPgF,UAAW,EAAKA,UAAUd,KAAK,MAN1BlE,EAAMtB,OAUjB,+BACE,sCAAQ,UACPwG,EAAS7F,QAAQ8C,KAAI,SAACW,GAAD,OACpB,6BAAqBoC,EAAStC,OAAOjE,IAAImE,EAAOpE,KAAvCoE,EAAOpE,SAHZ,oBAQWG,IAArBqG,EAASM,QACX,cAAC,EAAD,CAAkCxF,MAAOkF,EAASK,WAAW5G,IAAIuG,EAASM,SAAWnG,QAAS6F,EAAS7F,QAAS0E,YAAavG,KAAKuG,YAAYG,KAAK1G,OAAnI0H,EAASM,cACtB3G,SA5Kb,GAA8BwD,IAAMC,eCfvBgE,EAAb,kDACE,WAAYxE,GAAsB,IAAD,8BAC/B,cAAMA,IACDC,MAAQ,CACXpC,YAAQd,GAHqB,EADnC,qDAQE,WAAqB,IAAD,OAClB,sBAAC,4BAAAK,EAAA,sEACsB,EAAK4C,MAAM5B,SAASqG,aAD1C,OACO5G,EADP,OAEC,EAAKsC,SAAS,CAACtC,WAFhB,0CAAD,KATJ,oBAeE,WACE,IAAOA,EAAUnC,KAAKuE,MAAfpC,OACP,YAAcd,IAAXc,EACM,4CAEA,cAAC,IAAD,CAAUyC,GAAE,uBAAkBzC,SApB3C,GAA6B0C,IAAMC,e,gBCWtBkE,EAAb,kDACE,WAAY1E,GAAyB,IAAD,8BAClC,cAAMA,IACDC,MAAQ,CACXuD,UAAMzG,EACN4H,YAAa,GACbC,YAAa,EACbC,OAAO,GANyB,EADtC,qDAWE,WAAqB,IAAD,OAEdjI,EAAK8F,SAAShH,KAAKsE,MAAMpD,GAAI,IAC9B0G,MAAM1G,GACPlB,KAAKyE,SAAS,CAACqD,KAAM,OAErB,sBAAC,4BAAApG,EAAA,sEACoB,EAAK4C,MAAM5B,SAASmF,QAAQ3G,GADhD,OAEa,QADN4G,EADP,QAGG,EAAKrD,SAAS,CAACqD,KAAM,OAErB,EAAKrD,SAAS,CAACqD,SALlB,0CAAD,KAjBN,qBA4BE,SAAQtH,EAAsBQ,GACf,OAAVR,EACDR,KAAKyE,UAAS,SAAC6D,GACb,MAAO,CACLW,YAAY,GAAD,mBACNX,EAASW,aADH,CAET,CAACX,EAASY,YAAalI,KAEzBkI,YAAaZ,EAASY,YAAc,MAIxClJ,KAAKyE,UAAS,SAAC6D,GAKb,MAAO,CAACW,YAJYX,EAASW,YAAYN,MAAM,EAAGnI,GAAOkI,OACvD,CAAC,CAACJ,EAASW,YAAYzI,GAAO,GAAIQ,IAClCsH,EAASW,YAAYN,MAAMnI,EAAQ,UA3C7C,qBAkDE,SAAQA,EAAeQ,GACD,IAAjBA,EAAM8E,QACP9F,KAAKyE,UAAS,SAAC6D,GAIb,MAAO,CAACW,YAHYX,EAASW,YAAYN,MAAM,EAAGnI,GAAOkI,OACvDJ,EAASW,YAAYN,MAAMnI,EAAQ,UAtD7C,2DA6DE,4BAAAkB,EAAA,2DACSoG,EAAQ9H,KAAKuE,MAAbuD,MADT,gCAGU9H,KAAKsE,MAAM5B,SAAS0G,WAAWtB,EAAK1G,KAAKF,GAAIlB,KAAKuE,MAAM0E,YAAYtE,KAAI,SAAC0E,GAAD,OAAOA,EAAE,OAH3F,OAIIrJ,KAAKyE,SAAS,CAAC0E,OAAO,IAJ1B,gDA7DF,0EAqEE,WAAU,IAAD,OACP,EAAgDnJ,KAAKuE,MAA9CuD,EAAP,EAAOA,KAAMmB,EAAb,EAAaA,YAAaC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,MACvC,QAAY9H,IAATyG,EACD,OAAO,2CACF,GAAY,OAATA,EACR,OAAO,6CACF,GAAGqB,GAASrB,EAAKrG,OAAOqE,OAAS,GAAKgC,EAAKjG,QAAQiE,OAAS,EAEjE,OAAO,cAAC,IAAD,CAAUlB,GAAE,WAAMkD,EAAK1G,KAAKF,MAEnC,IAAMW,EAAU,GAOhB,OANAoH,EAAYjF,SAAQ,WAAexD,GAAW,IAAD,mBAAvBU,EAAuB,KAAnBoE,EAAmB,KAC3CzD,EAAQd,KAAK,+BAAa,wCAAWP,EAAX,OAAsBU,KAAQ,6BAAI,uBAAO+F,KAAK,OAAOjG,MAAOsE,EAAQuB,SAAU,SAAClG,GAAD,OAAW,EAAK2I,QAAQ9I,EAAOG,EAAME,OAAOG,QAAQuI,OAAQ,SAAC5I,GAAD,OAAW,EAAK6I,QAAQhJ,EAAOG,EAAME,OAAOG,cAA1LE,OAErB+H,EAAYnD,OAAS,GACtBjE,EAAQd,KAAK,+BAAsB,uCAAc,6BAAI,uBAAOkG,KAAK,OAAOjG,MAAM,GAAG6F,SAAU,SAAClG,GAAD,OAAW,EAAK2I,QAAQ,KAAM3I,EAAME,OAAOG,cAAhHkI,IAGtB,qCACE,kDACA,uBAAOxE,UAAU,UAAjB,SACE,gCACG7C,MAGL,wBAAQ0F,QAAS,kBAAM,EAAKkC,UAAUC,SAAUT,EAAYnD,OAAS,EAArE,0BA9FV,GAAgCjB,IAAMC,eCVjB6E,E,kDACnB,WAAYrF,GAAY,IAAD,8BACrB,cAAMA,IACDC,MAAQ,CACX7B,cAAUrB,GAHS,E,qDAOvB,WAAqB,IAAD,OAElB2B,EAAUU,MAAK,SAAChB,GAEd,EAAK+B,SAAS,CAAC/B,kB,oBAInB,WACE,IAAOA,EAAY1C,KAAKuE,MAAjB7B,SACP,YAAgBrB,IAAbqB,EACM,2CAGL,sBAAKgC,UAAU,MAAf,UACE,4BAAIkF,iBACJ,cAAC,IAAD,CAAeC,SAAUD,eAAzB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOE,KAAK,OAAOC,OAAQ,kBAAM,cAAC,EAAD,CAASrH,SAAUA,OACpD,cAAC,IAAD,CACEoH,KAAK,qBACLC,OAAQ,SAACzF,GAAD,OAAW,cAAC,EAAD,CAAYpD,GAAIoD,EAAM0F,MAAMC,OAAO7I,KAAMsB,SAAUA,OACxE,cAAC,IAAD,CACEoH,KAAK,SACLC,OAAQ,SAACzF,GAAD,OAAW,cAAC,EAAD,CAAUpD,GAAIoD,EAAM0F,MAAMC,OAAO7I,KAAMsB,SAAUA,OACtE,cAAC,IAAD,CAAOoH,KAAK,IAAIC,OAAQ,kBAAM,cAAC,EAAD,CAAWrH,SAAUA,mB,GAjChCmC,IAAMC,eCDnBoF,QACW,cAA7BjH,OAAOkH,SAASC,UAEe,UAA7BnH,OAAOkH,SAASC,UAEhBnH,OAAOkH,SAASC,SAASJ,MAAM,2DCfnC,IAYeK,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB7G,MAAK,YAAkD,IAA/C8G,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASd,OACP,cAAC,IAAMe,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFyHpB,kBAAmBC,WACrBA,UAAUC,cAAc/B,MACrBzF,MAAK,SAACyH,GACLA,EAAaC,gBAEdC,OAAM,SAAC7H,GACNI,QAAQJ,MAAMA,EAAM8H,YEpH5BjB,M","file":"static/js/main.9ce461c7.chunk.js","sourcesContent":["export interface Game {\n  id: number,\n  name: string,\n  created: Date,\n  modified: Date,\n}\n\nexport interface Player {\n  id: number,\n  game: number,\n  name: string,\n}\n\nexport type Contract = 'petite' | 'garde' | 'garde sans' | 'garde contre';\n\nexport interface Round {\n  id: number,\n  game: number,\n  attacker: number,\n  called: number | null,\n  contract: Contract,\n  attackOudlers: number,\n  attackScore: number,\n}\n\nconst VERSION = 1;\n\nconst SCHEMA = [\n  {\n    name: 'games',\n    config: {keyPath: 'id', autoIncrement: true},\n    indexes: ['name', 'created', 'modified'],\n  },\n  {\n    name: 'game_players',\n    config: {keyPath: 'id', autoIncrement: true},\n    indexes: ['game'],\n  },\n  {\n    name: 'rounds',\n    config: {keyPath: 'id', autoIncrement: true},\n    indexes: ['game'],\n  },\n];\n\nexport class Database {\n  idb: IDBDatabase;\n\n  constructor(idb: IDBDatabase) {\n    this.idb = idb;\n  }\n\n  listGames(): Promise<Game[]> {\n    const transaction = this.idb.transaction(['games'], 'readonly');\n    const games = transaction.objectStore('games');\n    return new Promise((accept, reject) => {\n      const array: Game[] = [];\n      games.index('created').openCursor().onsuccess = (event) => {\n        const cursor = (event.target as unknown as {result?: IDBCursor}).result;\n        if(cursor) {\n          array.push((cursor as unknown as {value: Game}).value);\n          cursor.continue();\n        } else {\n          accept(array);\n        }\n      };\n    });\n  }\n\n  _getGame(transaction: IDBTransaction, id: number): Promise<Game | null> {\n    const games = transaction.objectStore('games');\n    return new Promise((accept, reject) => {\n      games.get(id).onsuccess = (event) => {\n        const game = (event.target as unknown as {result: Game | null | undefined}).result;\n        if(game === undefined) {\n          accept(null);\n        } else {\n          accept(game);\n        }\n      };\n    });\n  }\n\n  _getPlayers(transaction: IDBTransaction, id: number): Promise<Player[]> {\n    const game_players = transaction.objectStore('game_players');\n    return new Promise((accept, reject) => {\n      const array: Player[] = [];\n      game_players.index('game').openCursor(IDBKeyRange.only(id)).onsuccess = (event) => {\n        const cursor = (event.target as unknown as {result?: IDBCursor}).result;\n        if(cursor) {\n          array.push((cursor as unknown as {value: Player}).value);\n          cursor.continue();\n        } else {\n          accept(array);\n        }\n      };\n    });\n  }\n\n  _getRounds(transaction: IDBTransaction, id: number): Promise<Round[]> {\n    const rounds = transaction.objectStore('rounds');\n    return new Promise((accept, reject) => {\n      const array: Round[] = [];\n      rounds.index('game').openCursor(IDBKeyRange.only(id)).onsuccess = (event) => {\n        const cursor = (event.target as unknown as {result?: IDBCursor}).result;\n        if(cursor) {\n          array.push((cursor as unknown as {value: Round}).value);\n          cursor.continue();\n        } else {\n          accept(array);\n        }\n      };\n    });\n  }\n\n  async getGame(id: number): Promise<{game: Game, players: Player[], rounds: Round[]} | null> {\n    const transaction = this.idb.transaction(\n      ['games', 'game_players', 'rounds'],\n      'readonly',\n    );\n    // Get game\n    const game = await this._getGame(transaction, id);\n    if(game === null) {\n      return null;\n    } else {\n      // Get the players and rounds\n      const players = await this._getPlayers(transaction, id);\n      const rounds = await this._getRounds(transaction, id);\n\n      return {game, players, rounds};\n    }\n  }\n\n  createGame(): Promise<number> {\n    const transaction = this.idb.transaction(['games'], 'readwrite');\n    const games = transaction.objectStore('games');\n    return new Promise((accept, reject) => {\n      games.add({name: \"New Game\", created: new Date(), modified: new Date()}).onsuccess = (event) => {\n        const gameId = (event.target as unknown as {result: number}).result;\n        accept(gameId);\n      };\n    });\n  }\n\n  renameGame(id: number, name: string): Promise<void> {\n    const transaction = this.idb.transaction(['games'], 'readwrite');\n    const games = transaction.objectStore('games');\n    return new Promise((accept, reject) => {\n      games.get(id).onsuccess = (event) => {\n        const game = (event.target as unknown as {result: Game}).result;\n        if(!game) {\n          reject(new Error(\"No such game\"));\n        } else {\n          game.name = name;\n          games.put(game).onsuccess = () => {\n            accept();\n          };\n        }\n      };\n    });\n  }\n\n  async removeGame(id: number): Promise<void> {\n    const transaction = this.idb.transaction(['games', 'game_players', 'rounds'], 'readwrite');\n    // Delete players\n    await new Promise((accept, reject) => {\n      const game_players = transaction.objectStore('game_players');\n      game_players.index('game').openCursor(IDBKeyRange.only(id)).onsuccess = (event) => {\n        const cursor = (event.target as unknown as {result?: IDBCursor}).result;\n        if(cursor) {\n          cursor.delete();\n          cursor.continue();\n        } else {\n          accept(0);\n        }\n      };\n    });\n    // Delete rounds\n    await new Promise((accept, reject) => {\n      const rounds = transaction.objectStore('rounds');\n      rounds.index('game').openCursor(IDBKeyRange.only(id)).onsuccess = (event) => {\n        const cursor = (event.target as unknown as {result?: IDBCursor}).result;\n        if(cursor) {\n          cursor.delete();\n          cursor.continue();\n        } else {\n          accept(0);\n        }\n      };\n    });\n    // Delete game\n    await new Promise((accept, reject) => {\n      const games = transaction.objectStore('games');\n      games.delete(id).onsuccess = (event) => {\n        accept(0);\n      };\n    });\n  }\n\n  async setPlayers(gameId: number, names: string[]): Promise<void> {\n    const transaction = this.idb.transaction(['game_players'], 'readwrite');\n    const game_players = transaction.objectStore('game_players');\n    for(const name of names) {\n      await new Promise((accept, reject) => {\n        game_players.add({game: gameId, name});\n        accept(0);\n      });\n    }\n  }\n\n  setRound(round: Round): Promise<number> {\n    const transaction = this.idb.transaction(['rounds'], 'readwrite');\n    const rounds = transaction.objectStore('rounds');\n    return new Promise((accept, reject) => {\n      rounds.put(round).onsuccess = (event) => {\n        const roundId = (event.target as unknown as {result: number}).result;\n        accept(roundId);\n      };\n    });\n  }\n}\n\nasync function addTestData(database: Database): Promise<void> {\n  // Open transaction\n  const transaction = database.idb.transaction(\n    ['games', 'game_players', 'rounds'],\n    'readwrite',\n  );\n  const games = transaction.objectStore('games');\n\n  // Check if data is present\n  const hasData = await new Promise((accept, reject) => {\n    games.openCursor().onsuccess = (event) => {\n      let cursor = (event.target as unknown as {result?: IDBCursor}).result;\n      if(cursor) {\n        accept(true);\n      } else {\n        accept(false);\n      }\n    };\n  });\n\n  if(!hasData) {\n    // Add test data\n    // Games\n    games.add(\n      {id: 1, name: \"Game 1\", created: new Date('2021-11-27T23:32:27'), modified: new Date('2021-11-28T02:07:15')},\n    );\n    games.add(\n      {id: 2, name: \"Game 2\", created: new Date('2021-11-29T01:45:39'), modified: new Date('2021-11-29T05:57:31')},\n    );\n    // Players\n    const game_players = transaction.objectStore('game_players');\n    game_players.add(\n      {id: 1, game: 1, name: \"Remi\"},\n    );\n    game_players.add(\n      {id: 2, game: 1, name: \"Vicky\"},\n    );\n    game_players.add(\n      {id: 3, game: 1, name: \"Brian\"},\n    );\n    // Rounds\n    const rounds = transaction.objectStore('rounds');\n    rounds.add(\n      {id: 1, game: 1, attacker: 2, called: null, contract: 'petite', attackOudlers: 2, attackScore: 48},\n    );\n    rounds.add(\n      {id: 2, game: 1, attacker: 3, called: null, contract: 'garde', attackOudlers: 3, attackScore: 45},\n    );\n    rounds.add(\n      {id: 3, game: 1, attacker: 1, called: null, contract: 'petite', attackOudlers: 1, attackScore: 49},\n    );\n  }\n}\n\nexport const db_future: Promise<Database> = new Promise((accept, reject) => {\n  if(!window.indexedDB) {\n    alert(\"Your browser doesn't support IndexedDB, can't store any data!\");\n  } else {\n    // Open database\n    let request = window.indexedDB.open(\"scores\", VERSION);\n    request.onerror = () => {\n      alert(\"Couldn't use IndexedDB\");\n      reject(new Error(\"Couldn't use IndexedDB\"));\n    };\n    request.onsuccess = (event) => {\n      const db: IDBDatabase = request.result;\n      // Attach error handler (show alert)\n      db.onerror = (event) => {\n        const error = (event.target as any)?.error;\n        if(error) {\n          alert(\"Database error: \" + error);\n        }\n      };\n      // Construct object\n      let database = new Database(db);\n      // Add test data\n      addTestData(database).then(() => {\n        // Resolve promise\n        accept(new Database(db));\n      });\n    };\n\n    request.onupgradeneeded = (event) => {\n      // Create schema\n      console.log(\"Upgrading database:\", event.oldVersion, \"->\", event.newVersion);\n      if(event.oldVersion === VERSION) {\n        return;\n      }\n      let db: IDBDatabase = (event.target as unknown as {result: IDBDatabase}).result;\n      SCHEMA.forEach(({name, config, indexes}) => {\n        let objectStore = db.createObjectStore(name, config);\n        indexes.forEach((idxColumn) => objectStore.createIndex(idxColumn, idxColumn, {unique: false}));\n      });\n    };\n  }\n});\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport {Database, Game} from './db';\n\ninterface GamesListProps {\n  database: Database,\n}\n\ninterface GamesListState {\n  games: Game[] | undefined,\n}\n\nexport class GamesList extends React.PureComponent<GamesListProps, GamesListState> {\n  constructor(props: GamesListProps) {\n    super(props);\n    this.state = {\n      games: undefined,\n    };\n  }\n\n  componentDidMount() {\n    // List games\n    (async () => {\n      const games = await this.props.database.listGames();\n      this.setState({games});\n    })();\n  }\n\n  render() {\n    const {games} = this.state;\n    if(!games) {\n      return <p>Loading...</p>;\n    } else {\n      return (\n        <ul className=\"games-list\">\n          {games.map((game) => (\n            <li key={game.id}><Link to={`/${game.id}`}>{game.name}</Link></li>\n          ))}\n          <li key=\"new\" className=\"new-game\"><Link to=\"/new\">New game</Link></li>\n        </ul>\n      );\n    }\n  }\n}\n","import {Player, Round} from './db';\n\nexport function roundTarget(round: Round): number {\n  if(round.attackOudlers === 1) {\n    return 51;\n  } else if(round.attackOudlers === 2) {\n    return 41;\n  } else if(round.attackOudlers === 3) {\n    return 36;\n  } else {\n    return 56;\n  }\n}\n\nexport function roundContractMultiplier(round: Round): number {\n  if(round.contract === 'garde') {\n    return 2;\n  } else if(round.contract === 'garde sans') {\n    return 4;\n  } else if(round.contract === 'garde contre') {\n    return 6;\n  } else {\n    return 1;\n  }\n}\n\nexport function roundPlayerMultiplier(playerId: number, players: number, round: Round): number {\n  if(players === 5) {\n    if(playerId === round.attacker && playerId === round.called) {\n      // Attacker who called themselves (1 against 4)\n      return 4;\n    } else if(playerId === round.attacker) {\n      // Attacker who called someone else (2 for them, 1 for callee)\n      return 2;\n    } else if(playerId === round.called) {\n      // Player called (king)\n      return 1;\n    } else {\n      // Defense\n      return -1;\n    }\n  } else {\n    if(playerId === round.attacker) {\n      // Attacker\n      return players - 1;\n    } else {\n      // Defense\n      return -1;\n    }\n  }\n}\n\nexport function totalScores(players: Player[], rounds: Round[]): Map<number, number> {\n  const scores = new Map();\n  players.forEach((player) => {\n    scores.set(player.id, 0);\n  });\n  rounds.forEach((round) => {\n    // Target number of points, depending on oudlers\n    const target = roundTarget(round);\n\n    // Attack succeeds if number of points is reached\n    const attackSuccessful = round.attackScore >= target;\n\n    // The multiplier depends on the contract chosen by the attack\n    let contractMultiplier = roundContractMultiplier(round);\n\n    const score = (25 + Math.abs(round.attackScore - target)) * (attackSuccessful?1:-1) * contractMultiplier;\n\n    players.forEach((player) => {\n      const change = score * roundPlayerMultiplier(player.id, players.length, round);\n      scores.set(\n        player.id,\n        scores.get(player.id) + change,\n      );\n    });\n  });\n\n  return scores;\n}\n","import React from 'react';\nimport {Contract, Player, Round} from './db';\n\ninterface RoundEditProps {\n  round: Round,\n  players: Player[],\n  changeRound: (round: Round) => void,\n}\n\nexport class RoundEdit extends React.PureComponent<RoundEditProps, Round> {\n  constructor(props: RoundEditProps) {\n    super(props);\n    this.state = Object.assign({}, props.round);\n  }\n\n  changeContract(contract: Contract) {\n    this.setState({contract});\n  }\n\n  changeAttacker(playerId: number) {\n    this.setState({attacker: playerId});\n  }\n\n  changeOudlers(attackOudlers: number) {\n    this.setState({attackOudlers: Math.max(0, Math.min(3, attackOudlers))});\n  }\n\n  changeAttackScore(attackScore: number) {\n    this.setState({attackScore: Math.max(0, Math.min(91, attackScore))});\n  }\n\n  changeDefenseScore(defenseScore: number) {\n    this.changeAttackScore(91 - defenseScore);\n  }\n\n  handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n    this.props.changeRound(this.state);\n  }\n\n  render() {\n    const {players} = this.props;\n    const round = this.state;\n    const attackScore = round.attackScore;\n    const defenseScore = 91 - round.attackScore;\n    return (\n      <form onSubmit={this.handleSubmit.bind(this)} style={{marginTop: '2em'}}>\n        Contract: <select value={round.contract} onChange={(event) => this.changeContract(event.target.value as unknown as Contract)}>\n          <option value=\"petite\">Petite</option>\n          <option value=\"garde\">Garde</option>\n          <option value=\"garde sans\">Garde sans</option>\n          <option value=\"garde contre\">Garde contre</option>\n        </select>{' '}\n      Attack: <select value={round.attacker} onChange={(event) => this.changeAttacker(parseInt(event.target.value, 10))}>\n          {players.map((player) => <option key={player.id} value={player.id}>{player.name}</option>)}\n        </select>{' '}\n        Oudlers: <input type=\"number\" min={0} max={3} size={1} value={round.attackOudlers} onChange={(event) => this.changeOudlers(parseInt(event.target.value, 10))} />{' '}\n        Attack: <input type=\"number\" min={0} max={91} size={2} value={attackScore} onChange={(event) => this.changeAttackScore(parseInt(event.target.value, 10))} />{' '}\n        Defense: <input type=\"number\" min={0} max={91} size={2} value={defenseScore} onChange={(event) => this.changeDefenseScore(parseInt(event.target.value, 10))} />{' '}\n        <input type=\"submit\" value=\"Set\" />\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport {roundTarget, roundContractMultiplier, roundPlayerMultiplier} from './rules';\nimport {Game, Player, Round} from './db';\n\ninterface RoundViewProps {\n  game: Game,\n  players: Player[],\n  playersById: Map<number, Player>,\n  round: Round,\n  editRound: (roundId: number) => void,\n}\n\nexport class RoundView extends React.PureComponent<RoundViewProps> {\n  render() {\n    const {players, playersById, round} = this.props;\n\n    const target = roundTarget(round);\n    const attackSuccessful = round.attackScore >= target;\n    const contractMultiplier = roundContractMultiplier(round);\n    const score = (25 + Math.abs(round.attackScore - target)) * (attackSuccessful?1:-1) * contractMultiplier;\n\n    const renderPlayerScore = (playerId: number) => {\n      const change = score * roundPlayerMultiplier(playerId, players.length, round);\n      return change;\n    };\n\n    return (<>\n      <td key=\"round\">\n        <button className=\"like-link\" onClick={() => this.props.editRound(round.id)}>\n          {round.id}: {playersById.get(round.attacker)!.name} {round.contract}, {(round.attackScore >= target)?\"win +\":\"fail -\"}{Math.abs(round.attackScore - target)}\n        </button>\n      </td>\n      {players.map((player) => (\n        <td key={player.id}>{renderPlayerScore(player.id)}</td>\n      ))}\n    </>);\n  }\n}\n","import React from 'react';\nimport {Link, Redirect} from 'react-router-dom';\nimport {Database, Game, Player, Round} from './db';\nimport {totalScores} from './rules';\nimport {RoundEdit} from './RoundEdit';\nimport {RoundView} from './RoundView';\n\ninterface GameViewProps {\n  id: string,\n  database: Database,\n}\n\ninterface GameInfo {\n  game: Game,\n  players: Player[],\n  playersById: Map<number, Player>,\n  rounds: Round[],\n  roundsById: Map<number, Round>,\n  scores: Map<number, number>,\n  editing: number | undefined,\n}\n\ninterface GameViewState {\n  gameInfo: GameInfo | undefined | null,\n  removed: boolean,\n}\n\nexport class GameView extends React.PureComponent<GameViewProps, GameViewState> {\n  constructor(props: GameViewProps) {\n    super(props);\n    this.state = {\n      gameInfo: undefined,\n      removed: false,\n    };\n  }\n\n  componentDidMount() {\n    // Get game\n    let id = parseInt(this.props.id, 10);\n    if(isNaN(id)) {\n      this.setState({gameInfo: null});\n    } else {\n      (async () => {\n        const info = await this.props.database.getGame(id);\n        if(info === null) {\n          this.setState({gameInfo: null});\n        } else {\n          const {game, players, rounds} = info;\n\n          const playersById = new Map();\n          players.forEach((player) => playersById.set(player.id, player));\n\n          const roundsById = new Map();\n          rounds.forEach((round) => roundsById.set(round.id, round));\n\n          // Compute total scores\n          const scores = totalScores(players, rounds);\n\n          this.setState({\n            gameInfo: {\n              game,\n              players,\n              playersById,\n              rounds,\n              roundsById,\n              scores,\n              editing: undefined,\n            },\n          });\n        }\n      })();\n    }\n  }\n\n  rename() {\n    const {gameInfo} = this.state;\n    if(!gameInfo) {\n      return;\n    } else {\n      const {game} = gameInfo;\n      const newName = window.prompt(\"New name\", game.name);\n      if(newName && newName !== game.name) {\n        (async () => {\n          await this.props.database.renameGame(game.id, newName);\n          this.setState({\n            gameInfo: {\n              ...gameInfo,\n              game: {...game, name: newName},\n            },\n          });\n        })();\n      }\n    }\n  }\n\n  remove() {\n    const {gameInfo} = this.state;\n    if(!gameInfo) {\n      return;\n    } else {\n      const {game} = gameInfo;\n      const confirmed = window.confirm(\"Are you sure you want to delete?\");\n      if(confirmed) {\n        (async () => {\n          await this.props.database.removeGame(game.id);\n          this.setState({\n            removed: true,\n          });\n        })();\n      }\n    }\n  }\n\n  editRound(roundId: number) {\n    this.setState((oldState) => {\n      const {gameInfo} = oldState;\n      if(gameInfo) {\n        return {gameInfo: {...gameInfo, editing: roundId}};\n      } else {\n        return {gameInfo};\n      }\n    });\n  }\n\n  async changeRound(round: Round): Promise<void> {\n    round.id = await this.props.database.setRound(round);\n    this.setState((oldState) => {\n      const {gameInfo} = oldState;\n      if(gameInfo) {\n        let roundIndex = undefined;\n        gameInfo.rounds.forEach((otherRound, index) => {\n          if(otherRound.id === round.id) {\n            roundIndex = index;\n          }\n        });\n        let rounds;\n        if(roundIndex === undefined) {\n          rounds = gameInfo.rounds.concat([round]);\n        } else {\n          rounds = gameInfo.rounds.slice(0, roundIndex).concat(\n            [round],\n            gameInfo.rounds.slice(roundIndex + 1),\n          );\n        }\n        return {gameInfo: {...gameInfo, rounds, editing: undefined}};\n      } else {\n        return {gameInfo};\n      }\n    });\n  }\n\n  render() {\n    const {gameInfo, removed} = this.state;\n    if(removed) {\n      return <Redirect to=\"/\" />;\n    } else if(gameInfo === undefined) {\n      return <p>Loading...</p>;\n    } else if(gameInfo === null) {\n      return <p>No such game</p>;\n    } else {\n      return (\n        <>\n          <p><Link to=\"/\">Back to games</Link></p>\n          <h1>\n            {gameInfo.game.name}{' '}\n            <button onClick={() => this.rename()}>(edit)</button>{' '}\n            <button onClick={() => this.remove()}>(delete)</button>\n          </h1>\n          <table className=\"scores\">\n            <thead>\n              <tr>\n                <td className=\"corner\"></td>\n                {gameInfo.players.map((player) => (\n                  <th key={player.id}>{player.name}</th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {gameInfo.rounds.map((round) => (\n                <tr key={round.id}>\n                  <RoundView\n                    game={gameInfo.game}\n                    players={gameInfo.players}\n                    playersById={gameInfo.playersById}\n                    round={round}\n                    editRound={this.editRound.bind(this)}\n                  />\n                </tr>\n              ))}\n              <tr key=\"total\">\n                <td key=\"header\">TOTAL</td>\n                {gameInfo.players.map((player) => (\n                  <th key={player.id}>{gameInfo.scores.get(player.id)}</th>\n                ))}\n              </tr>\n            </tbody>\n          </table>\n          {(gameInfo.editing !== undefined)?\n          <RoundEdit key={gameInfo.editing} round={gameInfo.roundsById.get(gameInfo.editing)!} players={gameInfo.players} changeRound={this.changeRound.bind(this)} />\n            :undefined}\n        </>\n      );\n    }\n  }\n}\n","import React from 'react';\nimport {Redirect} from 'react-router-dom';\nimport {Database} from './db';\n\ninterface NewGameProps {\n  database: Database,\n}\n\ninterface NewGameState {\n  gameId: number | undefined,\n}\n\nexport class NewGame extends React.PureComponent<NewGameProps, NewGameState> {\n  constructor(props: NewGameProps) {\n    super(props);\n    this.state = {\n      gameId: undefined,\n    };\n  }\n\n  componentDidMount() {\n    (async() => {\n      const gameId = await this.props.database.createGame();\n      this.setState({gameId});\n    })();\n  }\n\n  render() {\n    const {gameId} = this.state;\n    if(gameId === undefined) {\n      return <p>Creating...</p>;\n    } else {\n      return <Redirect to={`/set-players/${gameId}`} />;\n    }\n  }\n}\n","import React from 'react';\nimport {Redirect} from 'react-router-dom';\nimport {Database, Game, Player, Round} from './db';\n\ninterface SetPlayersProps {\n  database: Database,\n  id: string,\n}\n\ninterface Info {\n  game: Game,\n  players: Player[],\n  rounds: Round[],\n}\n\ninterface SetPlayersState {\n  info: Info | undefined | null,\n  // We give player name IDs to keep focus\n  playerNames: [number, string][],\n  playerIdGen: number,\n  ready: boolean,\n}\n\nexport class SetPlayers extends React.PureComponent<SetPlayersProps, SetPlayersState> {\n  constructor(props: SetPlayersProps) {\n    super(props);\n    this.state = {\n      info: undefined,\n      playerNames: [],\n      playerIdGen: 0,\n      ready: false,\n    };\n  }\n\n  componentDidMount() {\n    // Get game\n    let id = parseInt(this.props.id, 10);\n    if(isNaN(id)) {\n      this.setState({info: null});\n    } else {\n      (async() => {\n        const info = await this.props.database.getGame(id);\n        if(info === null) {\n          this.setState({info: null});\n        } else {\n          this.setState({info});\n        }\n      })();\n    }\n  }\n\n  changed(index: number | null, value: string) {\n    if(index === null) {\n      this.setState((oldState) => {\n        return {\n          playerNames: [\n            ...oldState.playerNames,\n            [oldState.playerIdGen, value],\n          ],\n          playerIdGen: oldState.playerIdGen + 1,\n        };\n      });\n    } else {\n      this.setState((oldState) => {\n        const playerNames = oldState.playerNames.slice(0, index).concat(\n          [[oldState.playerNames[index][0], value]],\n          oldState.playerNames.slice(index + 1),\n        );\n        return {playerNames};\n      });\n    }\n  }\n\n  blurred(index: number, value: string) {\n    if(value.length === 0) {\n      this.setState((oldState) => {\n        const playerNames = oldState.playerNames.slice(0, index).concat(\n          oldState.playerNames.slice(index + 1)\n        );\n        return {playerNames};\n      });\n    }\n  }\n\n  async commit() {\n    const {info} = this.state;\n    if(info) {\n      await this.props.database.setPlayers(info.game.id, this.state.playerNames.map((p) => p[1]));\n      this.setState({ready: true});\n    }\n  }\n\n  render() {\n    const {info, playerNames, playerIdGen, ready} = this.state;\n    if(info === undefined) {\n      return <p>Loading...</p>;\n    } else if(info === null) {\n      return <p>No such game</p>;\n    } else if(ready || info.rounds.length > 0 || info.players.length > 0) {\n      // Game is already setup, go to game view\n      return <Redirect to={`/${info.game.id}`} />;\n    } else {\n      const players = [];\n      playerNames.forEach(([id, player], index) => {\n        players.push(<tr key={id}><td>index={index} id={id}</td><td><input type=\"text\" value={player} onChange={(event) => this.changed(index, event.target.value)} onBlur={(event) => this.blurred(index, event.target.value)} /></td></tr>);\n      });\n      if(playerNames.length < 5) {\n        players.push(<tr key={playerIdGen}><td>(new)</td><td><input type=\"text\" value=\"\" onChange={(event) => this.changed(null, event.target.value)} /></td></tr>);\n      }\n      return (\n        <>\n          <h1>Set player names</h1>\n          <table className=\"players\">\n            <tbody>\n              {players}\n            </tbody>\n          </table>\n          <button onClick={() => this.commit()} disabled={playerNames.length < 3}>Play!</button>\n        </>\n      );\n    }\n  }\n}\n","import React from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport './App.css';\nimport {Database, db_future} from './db';\nimport {GamesList} from './GamesList';\nimport {GameView} from './GameView';\nimport {NewGame} from './NewGame';\nimport {SetPlayers} from './SetPlayers';\n\ninterface AppState {\n  database: Database | undefined,\n}\n\nexport default class App extends React.PureComponent<{}, AppState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      database: undefined,\n    };\n  }\n\n  componentDidMount() {\n    // Wait for database\n    db_future.then((database) => {\n      // Database is ready\n      this.setState({database});\n    });\n  }\n\n  render() {\n    const {database} = this.state;\n    if(database === undefined) {\n      return <p>Loading...</p>;\n    } else {\n      return (\n        <div className=\"App\">\n          <p>{process.env.PUBLIC_URL || ''}</p>\n          <BrowserRouter basename={process.env.PUBLIC_URL || ''}>\n            <Switch>\n              <Route path=\"/new\" render={() => <NewGame database={database} />} />\n              <Route\n                path=\"/set-players/:game\"\n                render={(props) => <SetPlayers id={props.match.params.game} database={database} />} />\n              <Route\n                path=\"/:game\"\n                render={(props) => <GameView id={props.match.params.game} database={database} />} />\n              <Route path=\"/\" render={() => <GamesList database={database} />} />\n            </Switch>\n          </BrowserRouter>\n        </div>\n      );\n    }\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}